<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\locknode.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\locknode.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Dec 22 15:29:40 2017
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; process_fingerRxBuffer &rArr; finger_processACK &rArr; search_result_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC1_COMP_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[12]">LPTIM1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[22]">SPI_2LinesRxISR</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[26]">SPI_DMAError</a> from stm32l0xx_hal_spi.o(.text) referenced 2 times from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[27]">SPI_DMAHalfReceiveCplt</a> from stm32l0xx_hal_spi.o(.text) referenced 2 times from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[24]">SPI_DMAHalfTransmitCplt</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[29]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[28]">SPI_DMAReceiveCplt</a> from stm32l0xx_hal_spi.o(.text) referenced 2 times from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[25]">SPI_DMATransmitCplt</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[2a]">SPI_DMATransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[23]">SPI_RxISR</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[21]">SPI_TxISR</a> from stm32l0xx_hal_spi.o(.text) referenced from stm32l0xx_hal_spi.o(.text)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from globalvar.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32l0xx.o(.text) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[15]">TIM21_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[16]">TIM22_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[13]">TIM2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[34]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[2d]">UART_DMAError</a> from stm32l0xx_hal_uart.o(.text) referenced 2 times from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[2e]">UART_DMAReceiveCplt</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[31]">UART_DMARxAbortCallback</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[2f]">UART_DMARxHalfCplt</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[33]">UART_DMARxOnlyAbortCallback</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[2b]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[30]">UART_DMATxAbortCallback</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[2c]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[32]">UART_DMATxOnlyAbortCallback</a> from stm32l0xx_hal_uart.o(.text) referenced from stm32l0xx_hal_uart.o(.text)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from usart.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[36]">cmdSwitchEn</a> from sx1276.o(.text) referenced from sx1276.o(.constdata)
 <LI><a href="#[37]">cmdSwitchPA</a> from sx1276.o(.text) referenced from sx1276.o(.constdata)
 <LI><a href="#[35]">lora_RWByte</a> from sx1276.o(.text) referenced 2 times from sx1276.o(.constdata)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[114]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[116]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[117]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[118]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[119]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[41]"></a>initDrivers</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = initDrivers &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn_LoRa
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_finger
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PowerControl_Configuration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>flash_running_led</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_running_led &rArr; LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>_lock_unit_test</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
</UL>

<P><STRONG><a name="[51]"></a>process_fingerRxBuffer</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = process_fingerRxBuffer &rArr; finger_processACK &rArr; search_result_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processEND
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processDATA
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processCMD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processACK
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerSearchFrame
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>_buf_send_to_server</STRONG> (Thumb, 148 bytes, Stack size 248 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>

<P><STRONG><a name="[5b]"></a>server_send</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buf_send_to_server
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_result_callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_down_success_callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_upper_callBack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serverRxBuffer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proces_lockUnitRxBuffer
</UL>

<P><STRONG><a name="[5e]"></a>proces_lockUnitRxBuffer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proces_lockUnitRxBuffer &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>finger_cmd_wait_timeOut</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finger_cmd_wait_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[60]"></a>finger_OpSta</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = finger_OpSta &rArr; sendCmd_search &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_upChar
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_store
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_search
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_regModel
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_match
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_getImg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_genChar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_empty
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_downChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_cmd_wait_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>process_serverRxBuffer</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = process_serverRxBuffer &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = main &rArr; process_fingerRxBuffer &rArr; finger_processACK &rArr; search_result_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serverRxBuffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proces_lockUnitRxBuffer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_running_led
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6d]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; SX1278_Interupt &rArr; RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>finger_module_upper_callBack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = finger_module_upper_callBack &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processDATA
</UL>

<P><STRONG><a name="[71]"></a>register_down_success_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = register_down_success_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processACK
</UL>

<P><STRONG><a name="[72]"></a>downchar_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = downchar_callback &rArr; sendData_downchar &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendData_downchar
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processACK
</UL>

<P><STRONG><a name="[74]"></a>search_result_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = search_result_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processACK
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, system_stm32l0xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; SX1278_Interupt &rArr; RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; SX1278_Interupt &rArr; RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>usart2_tx_gpio_init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart2_tx_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
</UL>

<P><STRONG><a name="[6c]"></a>send_cmd_to_lock</STRONG> (Thumb, 134 bytes, Stack size 176 bytes, lock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = send_cmd_to_lock &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_AFGPIO_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_gpio_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_result_callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serverRxBuffer
</UL>

<P><STRONG><a name="[11c]"></a>process_lock_unit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lock.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>test_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lock_unit_test
</UL>

<P><STRONG><a name="[7e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7c]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l0xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[42]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[80]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l0xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[d5]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[82]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[81]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l0xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[11d]"></a>HAL_SuspendTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>HAL_ResumeTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>HAL_DBGMCU_DBG_EnableLowPowerConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>HAL_DBGMCU_DBG_DisableLowPowerConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>HAL_SYSCFG_GetBootMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>HAL_SYSCFG_VREFINT_OutputSelect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>HAL_SYSCFG_Enable_Lock_VREFINT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>HAL_SYSCFG_Disable_Lock_VREFINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_finger
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GPIO_Config
</UL>

<P><STRONG><a name="[e4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_finger
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GPIO_Config
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[130]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[134]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_AFGPIO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_gpio_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_finger
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PowerControl_Configuration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GPIO_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[135]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_online
</UL>

<P><STRONG><a name="[79]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn_LoRa
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PowerControl_Configuration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff_LoRa
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdSwitchPA
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdSwitchEn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GPIO_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[dc]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; SX1278_Interupt &rArr; RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1572 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[3c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[88]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[138]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[139]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[8e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_SPI_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[92]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteData
</UL>

<P><STRONG><a name="[93]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 894 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteReadData
</UL>

<P><STRONG><a name="[94]"></a>HAL_SPI_Receive</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[98]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>

<P><STRONG><a name="[9d]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[9e]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[a0]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[a1]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[a2]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[a3]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[13c]"></a>HAL_SPI_DMAPause</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>HAL_SPI_DMAResume</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>

<P><STRONG><a name="[de]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_SPI_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[a8]"></a>UART_CheckIdleState</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_DisableMuteMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_EnableMuteMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>UART_SetConfig</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[af]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b0]"></a>HAL_LIN_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b1]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_UART_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_Receive</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[13f]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proces_lockUnitRxBuffer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[bb]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[140]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UART_Abort</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[c1]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[c2]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxAbortCallback
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxAbortCallback
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_Abort_IT</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[c5]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[c6]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[c8]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_MultiProcessor_EnableMuteMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[cd]"></a>HAL_MultiProcessor_DisableMuteMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[142]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>HAL_DMA_Init</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 670 bytes, Stack size 0 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>HAL_DMA_Start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[9f]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[a5]"></a>HAL_DMA_Abort</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
</UL>

<P><STRONG><a name="[c4]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 744 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[14a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 794 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>Schd_After</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, schd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schd_After_Int
</UL>

<P><STRONG><a name="[d4]"></a>Schd_After_Int</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, schd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schd_After
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d6]"></a>Schd_Run</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, schd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Schd_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, globalvar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; Schd_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schd_Run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>local_ticktime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, globalvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lock_unit_test
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_running_led
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_with_timeout
</UL>

<P><STRONG><a name="[4b]"></a>timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, globalvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_cmd_wait_timeOut
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lock_unit_test
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_running_led
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_with_timeout
</UL>

<P><STRONG><a name="[14d]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, globalvar.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>watchdog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, globalvar.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>Delay_1us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nus
</UL>

<P><STRONG><a name="[d7]"></a>Delay_nus</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1us
</UL>

<P><STRONG><a name="[d9]"></a>Delay_1ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
</UL>

<P><STRONG><a name="[5d]"></a>Delay_nms</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_nms
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>

<P><STRONG><a name="[4d]"></a>LED_OFF</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_running_led
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[4c]"></a>LED_ON</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_running_led
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[43]"></a>init_led</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_led &rArr; LED_Configuration &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[db]"></a>LED_TOGGLE</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_TOGGLE
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
</UL>

<P><STRONG><a name="[44]"></a>SPIx_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[df]"></a>SPIx_Error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteReadData
</UL>

<P><STRONG><a name="[e0]"></a>SPIx_WriteReadData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIx_WriteReadData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_RWByte
</UL>

<P><STRONG><a name="[e1]"></a>SPIx_WriteData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[e2]"></a>SPIx_Write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[35]"></a>lora_RWByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lora_RWByte &rArr; SPIx_WriteReadData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>SX1276Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1s
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[36]"></a>cmdSwitchEn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmdSwitchEn
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>cmdSwitchPA</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmdSwitchPA
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>register_rf_func</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[e9]"></a>SX1276WriteBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SLEEP
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CAD_RECEIVE
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_RF_SENDPACKET
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RECEIVE
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetMobileNode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPreamLength
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaFsk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[e8]"></a>SX1276ReadBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_GetVersion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetMobileNode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaFsk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>

<P><STRONG><a name="[e7]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SLEEP
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CAD_RECEIVE
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_RF_SENDPACKET
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RECEIVE
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[ea]"></a>SX1276LoRaFsk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaFsk &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[eb]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[ec]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[ed]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[ee]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
</UL>

<P><STRONG><a name="[ef]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
</UL>

<P><STRONG><a name="[f0]"></a>SX1276LoRaSetPacketCrcOn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetPacketCrcOn &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f1]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
</UL>

<P><STRONG><a name="[f2]"></a>SX1276LoRaSetImplicitHeaderOn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetImplicitHeaderOn &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f3]"></a>SX1276LoRaSetSymbTimeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetSymbTimeout &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f4]"></a>SX1276LoRaSetPayloadLength</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276LoRaSetPayloadLength &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f5]"></a>SX1276LoRaSetPreamLength</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[f6]"></a>SX1276LoRaSetMobileNode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetMobileNode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f7]"></a>SX1276_GetVersion</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276_GetVersion &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[f8]"></a>RF_RECEIVE</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF_RECEIVE &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[f9]"></a>SX1276_LoRa_SetDataRate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276_LoRa_SetDataRate &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
</UL>

<P><STRONG><a name="[fb]"></a>FUN_RF_SENDPACKET</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_with_timeout
</UL>

<P><STRONG><a name="[fc]"></a>RF_CAD_RECEIVE</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1276.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[fd]"></a>RF_SLEEP</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_Interupt
</UL>

<P><STRONG><a name="[5a]"></a>Lora_Send</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_with_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buf_send_to_server
</UL>

<P><STRONG><a name="[100]"></a>SX1276_InitSuccess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[101]"></a>SX1276_InitFailed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[48]"></a>Lora_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Lora_Init &rArr; SX1276LORA_INT &rArr; SX1276_LoRa_SetDataRate &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_InitFailed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_InitSuccess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_GetVersion
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_rf_func
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LORA_INT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[6e]"></a>SX1278_Interupt</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1278_Interupt &rArr; RF_SLEEP &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SLEEP
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RECEIVE
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[7b]"></a>UART_SendMsg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[7a]"></a>usart2_tx_AFGPIO_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart2_tx_AFGPIO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_lock
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[46]"></a>USARTConfig</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USARTConfig &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_AFGPIO_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>init_finger</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_finger &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[102]"></a>finger_online</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>

<P><STRONG><a name="[104]"></a>send_to_finger</STRONG> (Thumb, 150 bytes, Stack size 184 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendData_downchar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_upChar
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_store
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_search
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_regModel
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_match
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_getImg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_genChar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_empty
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_downChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_readInfo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_readFpflash
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_readNotepad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_writeNotepad
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_readSysPara
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_setSysPara
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_templeteNum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_deletChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_loadChar
</UL>

<P><STRONG><a name="[62]"></a>sendCmd_getImg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendCmd_getImg &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[63]"></a>sendCmd_genChar</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sendCmd_genChar &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[64]"></a>sendCmd_regModel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendCmd_regModel &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[66]"></a>sendCmd_upChar</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sendCmd_upChar &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[67]"></a>sendCmd_downChar</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sendCmd_downChar &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[65]"></a>sendCmd_store</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sendCmd_store &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[105]"></a>sendCmd_loadChar</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[106]"></a>sendCmd_deletChar</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[6a]"></a>sendCmd_empty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendCmd_empty &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[69]"></a>sendCmd_match</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendCmd_match &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[68]"></a>sendCmd_search</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sendCmd_search &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[107]"></a>sendCmd_templeteNum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[108]"></a>sendCmd_setSysPara</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[109]"></a>sendCmd_readSysPara</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[10a]"></a>sendCmd_writeNotepad</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[10b]"></a>sendCmd_readNotepad</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[10c]"></a>sendCmd_readFpflash</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[10d]"></a>sendCmd_readInfo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, finger.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>

<P><STRONG><a name="[73]"></a>sendData_downchar</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sendData_downchar &rArr; send_to_finger &rArr; UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_finger
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downchar_callback
</UL>

<P><STRONG><a name="[52]"></a>fingerSearchFrame</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, finger.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[53]"></a>finger_processCMD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finger.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[55]"></a>finger_processACK</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = finger_processACK &rArr; search_result_callback &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_result_callback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downchar_callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_down_success_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[56]"></a>finger_processEND</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finger_processEND
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[54]"></a>finger_processDATA</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, finger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = finger_processDATA &rArr; finger_module_upper_callBack &rArr; server_send &rArr; _buf_send_to_server &rArr; Lora_Send &rArr; lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_upper_callBack
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_fingerRxBuffer
</UL>

<P><STRONG><a name="[45]"></a>init_PowerControl_Configuration</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_PowerControl_Configuration &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[47]"></a>powerOn_LoRa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = powerOn_LoRa
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDrivers
</UL>

<P><STRONG><a name="[10e]"></a>powerOff_LoRa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lowpower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>

<P><STRONG><a name="[14f]"></a>enter_StopMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lowpower.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schd_After_Int
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schd_After
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serverRxBuffer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buf_send_to_server
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd_writeNotepad
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[157]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[158]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[159]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[61]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_processACK
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_OpSta
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[86]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[91]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler
</UL>

<P><STRONG><a name="[95]"></a>SPI_TxCloseIRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_TxCloseIRQHandler &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR
</UL>

<P><STRONG><a name="[21]"></a>SPI_TxISR</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_TxISR &rArr; SPI_TxCloseIRQHandler &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>SPI_RxCloseIRQHandler</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_RxCloseIRQHandler &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2LinesRxISR
</UL>

<P><STRONG><a name="[22]"></a>SPI_2LinesRxISR</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_2LinesRxISR &rArr; SPI_RxCloseIRQHandler &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>SPI_RxISR</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_RxISR &rArr; SPI_RxCloseIRQHandler &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>SPI_DMAError</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[b6]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[2d]"></a>UART_DMAError</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>UART_DMARxAbortCallback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>UART_DMATxAbortCallback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[d0]"></a>DMA_SetConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[da]"></a>LED_Configuration</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_Configuration &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
</UL>

<P><STRONG><a name="[dd]"></a>SPIx_MspInit</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[e3]"></a>Lora_GPIO_Config</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Lora_GPIO_Config &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[e6]"></a>Delay1s</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sx1276.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[fa]"></a>SX1276LORA_INT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276LORA_INT &rArr; SX1276_LoRa_SetDataRate &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRa_SetDataRate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RECEIVE
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetMobileNode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaFsk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[fe]"></a>lora_tx_with_timeout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lora_tx_with_timeout &rArr; FUN_RF_SENDPACKET &rArr; SX1276LoRaSetOpMode &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_ticktime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_RF_SENDPACKET
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
